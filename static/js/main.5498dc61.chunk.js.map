{"version":3,"sources":["AppFiles/Contexts/AppContext.js","utilities/Scroolbar/AppScrollbar.js","utilities/Consts.js","utilities/RoutesFunctions.js","utilities/FetchFunctions.js","utilities/CalculateWindowHeightHook.js","images/no_image.png","AppFiles/StartPage/StartPageCards.js","AppFiles/StartPage/StartPageSearchbar.js","AppFiles/StartPage/StartPage.js","AppFiles/Contexts/MovieSearchbarContext.js","AppFiles/MainPage/MainPageSearch/Hooks/GotoOtherRoutesHooks.js","AppFiles/MainPage/MainPageSearch/Results/MovieSearchbarResults.js","AppFiles/MainPage/MainPageSearch/MainPageSearch.js","AppFiles/MainPage/MainPageSearch/Hooks/enterKeyPressedInQuickSearch.js","AppFiles/MainPage/MainPageSearch/Hooks/ShowHideQuickSearchHook.js","images/BG_Unsplash.jpg","AppFiles/MainPage/MainPage.js","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","AppScrollbar","props","isMobile","className","children","API_KEY","BASE_API_URL","BASE_IMG_URL","POSTER_W500","NOT_FOUND_POSTER_W500","getCurrentPageUrl","location","pathname","substring","lastIndexOf","getMovieIdFromLocationPathname","getAutoComplete","input","a","url","axios","get","response","data","autocomplete","getMovieData","movieID","CalculateWindowHeightHook","useEffect","setDocHeight","document","documentElement","style","setProperty","window","innerHeight","addEventListener","removeEventListener","FullscreenSearch","useContext","searchbarText","suggestions","setMovieID","map","item","index","to","onClick","src","no_image","alt","StartPageSearch","oldSearchbarText","onSearchbarTextChanging","handleClickOnInput","onSubmit","e","preventDefault","onChange","type","placeholder","value","StartPage","div","initial","opacity","animate","exit","transition","duration","MovieSearchbarContext","GotoOtherRoutesHooks","setSearchbarText","pushToHistory","setAllMoviesData","fetchPopularMoviesOnStartPage","setShowQuickSearchRes","undefined","MovieSearchbarResults","showSuggestions","hoveredSuggestionIdx","autoCompltions","selectedMovieInQuickSearch","length","idx","query","MainPageSearch","showQuickSearchRes","indexOfHighlightedMovie","setIndexOfHighlightedMovie","keyCode","which","ArrowKeysNavigationInQuickSearchHooks","enterKeyPressedInQuickSearch","setOldSearchbarText","showResInSearchBar","setShowSuggestions","node","useRef","hideOnOutsideClick","current","contains","target","ShowHideQuickSearchHook","OnMovieSearchBarClicked","ref","onKeyPress","Movie","useState","Provider","BG_Unsplash","App","useLocation","history","useHistory","setSuggestions","initMovieID","setInitMovieID","movieData","setMovieData","setAutoCompltions","allMoviesData","console","log","replace","push","exitBeforeEnter","exact","path","render","Boolean","hostname","match","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5498dc61.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","import ScrollBar from 'react-perfect-scrollbar'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport './ScroolbarStyle.scss'\r\n\r\nexport default function AppScrollbar (props) {\r\n  // displays perfect scrollbar if not on mobile because I couldn't add refresh gesture on mobile\r\n  // https://github.com/goldenyz/react-perfect-scrollbar/issues/101\r\n  return (\r\n    isMobile ? (\r\n      <div className=\"overflow-y-auto\">\r\n        {props.children}\r\n      </div>\r\n    ) : (\r\n      <ScrollBar className='AppScroolbar'>\r\n        {props.children}\r\n      </ScrollBar>\r\n  ))\r\n}","export const API_KEY = '&client_id=k7OYrmaj7NjZpJJ9QYDXE0jejMLhB-rm7NTO3SLHbJ0'\r\nexport const BASE_API_URL = 'https://api.unsplash.com/'\r\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/'\r\n\r\nexport const POSTER_W500 = `${BASE_IMG_URL}w500`\r\nexport const NOT_FOUND_POSTER_W500 = `${POSTER_W500}null`\r\nexport const NOT_FOUND_BG_IMG = `${BASE_IMG_URL}originalnull`\r\n\r\n\r\nexport const POPULAR_MOVIES_URL = `${BASE_API_URL}/3/movie/popular?${API_KEY}` ","export const getCurrentPageUrl = location => (\r\n  location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1)\r\n)\r\n\r\nexport const getMovieIdFromLocationPathname = location => (\r\n  location.pathname.substring(location.pathname.lastIndexOf(\"/\") + 1)\r\n)","import axios from 'axios'\r\nimport { API_KEY, BASE_API_URL, POSTER_W500 } from './Consts'\r\nimport { getMovieIdFromLocationPathname } from './RoutesFunctions'\r\n\r\n//==== Fetch autoComplition ====\r\nexport async function getAutoComplete(input){\r\n  const url = `https://unsplash.com/nautocomplete/${input}`\r\n  const response = await axios.get(url)\r\n  return response.data.autocomplete\r\n}\r\n\r\n\r\n//==== Fetch all Pictures ====\r\nexport async function getMoviesDataToDisplayInSearch(input){\r\n  let allMoviesData\r\n  if (typeof input === 'string'){  // if url\r\n    allMoviesData = await getQueryData(input)\r\n  } else if (typeof input === 'object'){\r\n    allMoviesData = input\r\n  } else {\r\n    console.error(`Passed ${typeof input} input to getMoviesDataToDisplayInSearch. You must pass string or object`)\r\n    return \r\n  }\r\n\r\n  console.log(allMoviesData)\r\n\r\n  return allMoviesData.map(movie => [\r\n    movie.original_title,\r\n    movie.id,\r\n    POSTER_W500 + movie.poster_path\r\n  ])\r\n}\r\n\r\nexport async function getQueryData(url){\r\n  const response = await axios.get(url)\r\n  console.log(response)\r\n  return response.data.results\r\n}\r\n\r\nexport function createPictureSearchUrl(value){\r\n  return `${BASE_API_URL}search/photos?query=${value}${API_KEY}`\r\n}\r\n\r\n//==== Fetch one Picture ====\r\nexport async function getMovieData(movieID){\r\n  const response = await axios.get(`${BASE_API_URL}/3/movie/${movieID}?&${API_KEY}`)\r\n  return response.data\r\n}\r\n\r\nexport function setInitMovieID(location){\r\n  const initMovieID = getMovieIdFromLocationPathname(location)\r\n  if(initMovieID === '') return '157336' // interstellar\r\n  return initMovieID\r\n}","import { useEffect } from 'react'\r\n\r\nexport default function CalculateWindowHeightHook() {\r\n// calucluleta size of 1% of window height and saves it to variable\r\n// Proposal for new units to fix this \r\n// https://github.com/w3c/csswg-drafts/issues/4329\r\n// Solution from Jonas Sandstedt comment \r\n// https://chanind.github.io/javascript/2019/09/28/avoid-100vh-on-mobile-web.html\r\n\r\n  useEffect(() => {\r\n    function setDocHeight() {\r\n      document.documentElement.style.setProperty('--vh', `${window.innerHeight/100}px`)\r\n    }\r\n    window.addEventListener('resize', setDocHeight())\r\n    window.addEventListener('orientationchange', setDocHeight())\r\n\r\n    return () => {\r\n      // functions to be called when unmounted. not shure if it does anything here\r\n      document.removeEventListener('resize', setDocHeight)\r\n      document.removeEventListener('orientationchange', setDocHeight)\r\n    }\r\n  }, [])\r\n  \r\n  return (\r\n    <></>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","import { useContext } from 'react'\r\nimport '../../styles/main.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { AppContext } from '../Contexts/AppContext'\r\nimport { NOT_FOUND_POSTER_W500 } from '../../utilities/Consts'\r\nimport no_image from '../../images/no_image.png'\r\n\r\n\r\nexport default function FullscreenSearch() {\r\n  const {searchbarText, suggestions, setMovieID} = useContext(AppContext)\r\n\r\n  return (\r\n    <div className='StartPageCards'>\r\n\r\n    <div className='Container'>\r\n      <p className='title'>\r\n        {!searchbarText && 'Trending Now'}\r\n      </p>\r\n      <div className='row'>\r\n\r\n        {suggestions.map((item, index) => \r\n          <div \r\n            className='smallCard col-xl-2 col-md-3 col-4' \r\n            key={index}\r\n          >\r\n            <Link to={`/movie/${item[1]}`} className='linkStyle'>\r\n              <div onClick={() => setMovieID(item[1])}>\r\n                <img \r\n                  src={item[2] !== NOT_FOUND_POSTER_W500 \r\n                    ? item[2] \r\n                    : no_image}\r\n                  alt={`poster ${index}`}\r\n                />\r\n                <p>{item[0]}</p>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        )}\r\n        \r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport '../../styles/main.scss'\r\n// import { useScrollPosition } from '@n8tb1t/use-scroll-position'\r\nimport { AppContext } from '../Contexts/AppContext'\r\n\r\nexport default function StartPageSearch() {\r\n  const {searchbarText, oldSearchbarText, onSearchbarTextChanging, handleClickOnInput} = useContext(AppContext)\r\n\r\n  // const [changeStyle, setChangeStyle] = useState(false)\r\n  // useScrollPosition(({ prevPos, currPos }) => {\r\n  //   (currPos.y < -20) ? setChangeStyle(true) : setChangeStyle(false)    // is it implelented i scss?\r\n  //   console.log(changeStyle)\r\n  // })\r\n\r\n  return (\r\n    <div className='col-lg-6 col-md-8 col-sm-9 col-12 st-search st-animation'>\r\n      <div className='row'>\r\n        <div className='col-12' >\r\n          <form onSubmit={e => { e.preventDefault()}}>\r\n            <input\r\n              onChange={onSearchbarTextChanging}\r\n              className='myForm1 myForm-animation'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onClick={handleClickOnInput}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import StartPageCard from './StartPageCards'\r\nimport StartPageSearch from './StartPageSearchbar'\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport default function StartPage() {\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    > \r\n      <StartPageSearch />\r\n      <StartPageCard />\r\n    </motion.div> \r\n  )\r\n}","import {createContext} from 'react'\r\n\r\nexport const MovieSearchbarContext = createContext(null)","import { useContext } from 'react'\r\nimport { AppContext } from '../../../Contexts/AppContext'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\n\r\n\r\nexport default function GotoOtherRoutesHooks() {\r\n  const { searchbarText, setSearchbarText, oldSearchbarText,  setMovieID, pushToHistory, setAllMoviesData, fetchPopularMoviesOnStartPage} = useContext(AppContext)\r\n  const { setShowQuickSearchRes } = useContext(MovieSearchbarContext)\r\n\r\n  function selectedMovieInQuickSearch(item){\r\n    if (searchbarText && item !== undefined) {\r\n      pushToHistory(`/movie/${item[1]}`)\r\n      setSearchbarText(oldSearchbarText)\r\n      setShowQuickSearchRes(false)\r\n      setMovieID(item[1])\r\n    }\r\n  }\r\n\r\n  const gotoStarPage = () => {\r\n    setAllMoviesData([])\r\n    setSearchbarText('')\r\n    fetchPopularMoviesOnStartPage()\r\n    pushToHistory(`/`)\r\n  }\r\n\r\n  return [selectedMovieInQuickSearch, gotoStarPage]\r\n}","import { useContext } from 'react'\r\nimport { AppContext } from '../../../Contexts/AppContext'\r\nimport '../../../../styles/main.scss'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\nimport GotoOtherRoutesHooks from '../Hooks/GotoOtherRoutesHooks'\r\n\r\n\r\nexport default function MovieSearchbarResults() {\r\n  const { showSuggestions, hoveredSuggestionIdx } = useContext(MovieSearchbarContext)\r\n  const { searchbarText, autoCompltions } = useContext(AppContext)\r\n\r\n  const [selectedMovieInQuickSearch] = GotoOtherRoutesHooks()\r\n    \r\n\r\n  return (\r\n  <>\r\n    {autoCompltions.length > 0 //if\r\n    ? <ul \r\n        className={'searchbar_ul ' + \r\n        (showSuggestions && searchbarText && 'fadeIn')} \r\n      >\r\n        {autoCompltions.map((item, idx) => \r\n          <li \r\n            className={'searchbar_li ' + \r\n            (hoveredSuggestionIdx === idx && 'active')}\r\n\r\n            onClick={()=> selectedMovieInQuickSearch(item)}\r\n            index={idx}\r\n            key={idx}\r\n          >\r\n            <p className=''>\r\n              {item.query}\r\n            </p>\r\n          </li>\r\n        )}\r\n      </ul>\r\n\r\n    : //else\r\n      <ul className='fadeIn searchbar_ul'>\r\n        <li className='searchbar_li noResult'>no result</li>\r\n      </ul>\r\n    }\r\n  </>\r\n  )\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useContext } from 'react'\r\nimport { AppContext } from '../../Contexts/AppContext'\r\nimport '../../../styles/main.scss'\r\nimport ArrowKeysNavigationInQuickSearchHooks from './Hooks/enterKeyPressedInQuickSearch'\r\nimport ShowHideQuickSearchHook from './Hooks/ShowHideQuickSearchHook'\r\nimport GotoOtherRoutesHooks from './Hooks/GotoOtherRoutesHooks'\r\nimport MovieSearchbarResults from './Results/MovieSearchbarResults'\r\n\r\nexport default function MainPageSearch () {\r\n  const { searchbarText, oldSearchbarText, onSearchbarTextChanging } = useContext(AppContext)\r\n  \r\n  const [enterKeyPressedInQuickSearch] = ArrowKeysNavigationInQuickSearchHooks()\r\n  const [node, OnMovieSearchBarClicked] = ShowHideQuickSearchHook()\r\n  const [, gotoStarPage] = GotoOtherRoutesHooks()\r\n\r\n\r\n  return (\r\n    <div className='movieSearchBar'>\r\n      <div className='row container'>\r\n        <h1>Unsplash</h1>\r\n        <p>\r\n          The internet's source of freely-usable images <br/>\r\n          Powered by creators everywhere.\r\n        </p>\r\n        <div ref={node}>\r\n          <form className='searchbox' onSubmit={e => e.preventDefault()}>\r\n            <input\r\n              onChange={onSearchbarTextChanging}\r\n              className='movieSearchBarInput'\r\n              type='text'\r\n              placeholder='Search Movie Title...'\r\n              value={searchbarText !== '' ? searchbarText : oldSearchbarText}\r\n              onKeyPress={enterKeyPressedInQuickSearch}\r\n              onClick={OnMovieSearchBarClicked}\r\n            />\r\n          </form>\r\n          <MovieSearchbarResults/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport { AppContext } from '../../../Contexts/AppContext'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\nimport GotoOtherRoutesHooks from './GotoOtherRoutesHooks'\r\n\r\nexport default function ArrowKeysNavigationInQuickSearchHooks() {\r\n  const { suggestions, pushToHistory} = useContext(AppContext)\r\n  const { showQuickSearchRes, setShowQuickSearchRes, indexOfHighlightedMovie, setIndexOfHighlightedMovie } = useContext(MovieSearchbarContext)\r\n\r\n  const [selectedMovieInQuickSearch] = GotoOtherRoutesHooks()\r\n  \r\n  \r\n  function enterKeyPressedInQuickSearch(e){\r\n    const code = e.keyCode || e.which\r\n    if (code === 13 /* enter key */) {\r\n      // implement\r\n    }\r\n  }\r\n  return [enterKeyPressedInQuickSearch]\r\n}","import { AppContext } from '../../../Contexts/AppContext'\r\nimport { MovieSearchbarContext } from '../../../Contexts/MovieSearchbarContext'\r\nimport { useEffect, useContext, useRef } from 'react'\r\n\r\nexport default function ShowHideQuickSearchHook() {\r\n  const { searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, showResInSearchBar } = useContext(AppContext)\r\n  const { setShowSuggestions } = useContext(MovieSearchbarContext)\r\n  const node = useRef()\r\n\r\n  function hideOnOutsideClick(e) {\r\n    if (!node.current.contains(e.target)){\r\n      setShowSuggestions(false) \r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', hideOnOutsideClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', hideOnOutsideClick)\r\n    }\r\n  }, [])\r\n\r\n  const OnMovieSearchBarClicked = async e => {\r\n    setShowSuggestions(true)\r\n    if (searchbarText === '') {\r\n      showResInSearchBar(oldSearchbarText)\r\n      setSearchbarText(oldSearchbarText)\r\n      setOldSearchbarText('')\r\n    }\r\n  }\r\n\r\n  return [node, OnMovieSearchBarClicked]\r\n}","export default __webpack_public_path__ + \"static/media/BG_Unsplash.57fddc0a.jpg\";","import { useState } from 'react'\r\nimport { MovieSearchbarContext } from '../Contexts/MovieSearchbarContext'\r\nimport MovieSearch from './MainPageSearch/MainPageSearch'\r\nimport BG_Unsplash from '../../images/BG_Unsplash.jpg'\r\nimport { motion } from \"framer-motion\"\r\n\r\n\r\nexport default function Movie() {\r\n  const [showSuggestions, setShowSuggestions] = useState(false)\r\n  const [hoveredSuggestionIdx, setIndexOfHighlightedMovie] = useState()\r\n\r\n  return (\r\n    <MovieSearchbarContext.Provider value={{ showSuggestions,  setShowSuggestions,  hoveredSuggestionIdx, setIndexOfHighlightedMovie}}>\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1}}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1 }}\r\n      >    \r\n        <MovieSearch />\r\n        <img\r\n          className='BgImage'\r\n          src={BG_Unsplash}\r\n          alt='background_image'\r\n        />\r\n      </motion.div>\r\n    </MovieSearchbarContext.Provider>\r\n  )\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { Route, Switch, useLocation, useHistory } from 'react-router-dom'\r\nimport { AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppFiles/Contexts/AppContext'\r\nimport AppScroolbar from './utilities/Scroolbar/AppScrollbar'\r\nimport { getMoviesDataToDisplayInSearch, getQueryData, getMovieData, createPictureSearchUrl, setInitMovieID, getAutoComplete } from './utilities/FetchFunctions'\r\nimport { getCurrentPageUrl, getMovieIdFromLocationPathname } from './utilities/RoutesFunctions'\r\nimport CalculateWindowHeightHook from './utilities/CalculateWindowHeightHook'\r\nimport StartPage from './AppFiles/StartPage/StartPage'\r\nimport MainPage from './AppFiles/MainPage/MainPage'\r\n\r\n\r\nexport default function App () {\r\n  const location = useLocation()  // key to app routes\r\n  const history = useHistory()\r\n  const pushToHistory = url => history.push(url)\r\n\r\n\r\n// ==== Fetch StartPage ====\r\n  const [suggestions, setSuggestions] = useState([])\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n\r\n// ==== END Fetch StartPage ====\r\n\r\n\r\n// ==== Fetch movie page based on movieID parameter ====\r\n  const [movieID, setMovieID] = useState(setInitMovieID(location))\r\n  const [movieData, setMovieData] = useState({})\r\n  \r\n  useEffect(async () => {\r\n    setMovieData(await getMovieData(movieID))\r\n  }, [movieID])\r\n\r\n  // implements back button in browser\r\n  // allows to go back to previous movie on moviePage\r\n  useEffect(() => {\r\n    setMovieID(getMovieIdFromLocationPathname(location))\r\n  }, [location.pathname])\r\n  \r\n// ==== END Fetch movie page ====\r\n\r\nconst [autoCompltions, setAutoCompltions] = useState([])\r\n\r\n// ==== Search state and functions ====\r\n  const [allMoviesData, setAllMoviesData] = useState([])\r\n  const [oldSearchbarText, setOldSearchbarText] = useState('')\r\n\r\n\r\n  const onSearchbarTextChanging = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    showResInSearchBar(value)\r\n  }\r\n\r\n  const showResInSearchBar = async (value) => {\r\n    if (value.length === 0) setOldSearchbarText('')\r\n    if (value.length >= 3) {\r\n      // const allMoviesData = await getQueryData(createPictureSearchUrl(value))\r\n      // const dataToDisplay = await getMoviesDataToDisplayInSearch(allMoviesData)\r\n\r\n      // setAllMoviesData(allMoviesData)\r\n      // setSuggestions(dataToDisplay)\r\n\r\n      setAutoCompltions(await getAutoComplete(value))\r\n      // console.log(autoComplete)\r\n\r\n      setOldSearchbarText(value)\r\n    }\r\n  }\r\n\r\n  \r\n// ==== END Search state and functions ====\r\n\r\n\r\n// ==== Console log stuff ====\r\n  // useEffect(() => {\r\n  //   console.log(`allMoviesData.length ${allMoviesData.length}`)\r\n  //   console.log(`suggestions.length ${allMoviesData.length}`)\r\n  // }, [allMoviesData])\r\n\r\n  // useEffect(() => {\r\n  //   console.log({suggestions})\r\n  // }, [suggestions])\r\n\r\n  // useEffect(() => {\r\n  //   console.log({movieData})\r\n  // }, [movieData])\r\n\r\n  // useEffect(() => {\r\n  //   console.log(`searchbarText: ${searchbarText}`)\r\n  // }, [searchbarText])\r\n\r\n  useEffect(() => {\r\n    console.log(autoCompltions)\r\n  }, [autoCompltions])\r\n\r\n// ==== END Console log stuff ====\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CalculateWindowHeightHook/>\r\n      <AppContext.Provider \r\n        value={{movieID, movieData, searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, suggestions, setSuggestions,  onSearchbarTextChanging, allMoviesData, setAllMoviesData, setMovieID, showResInSearchBar, history, pushToHistory, autoCompltions}}\r\n      >\r\n        <AppScroolbar>\r\n          <AnimatePresence exitBeforeEnter>\r\n            <Switch \r\n              location={location} \r\n              key={getCurrentPageUrl(location)}\r\n            >\r\n              <Route exact path='/' render={() => <MainPage/>} />\r\n              <Route exact path={`/:${movieID}`} render={() => <StartPage/>} />\r\n            </Switch>\r\n          </AnimatePresence>\r\n        </AppScroolbar>\r\n      </AppContext.Provider>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}