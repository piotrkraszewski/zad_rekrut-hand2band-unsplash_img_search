{"version":3,"sources":["AppFiles/Contexts/AppContext.js","utilities/Scroolbar/AppScrollbar.js","utilities/Consts.js","utilities/RoutesFunctions.js","utilities/FetchFunctions.js","utilities/CalculateWindowHeightHook.js","images/no_image.png","images/pin.svg","AppFiles/Gallery/SingleImage.js","AppFiles/Gallery/GalleryCards.js","AppFiles/Searchbar/Hooks/GotoOtherRoutesHooks.js","AppFiles/Searchbar/SearchSuggestions.js","images/lupe.svg","AppFiles/Searchbar/Searchbar.js","AppFiles/Searchbar/Hooks/ShowHideSuggestionsHook.js","AppFiles/Searchbar/Hooks/KeyboardHooks.js","AppFiles/Gallery/GallerySearchbar.js","AppFiles/Gallery/Gallery.js","images/BG_Unsplash.jpg","AppFiles/StartPage.js","App.js","testingFiles/serviceWorker.js","index.js"],"names":["AppContext","createContext","AppScrollbar","props","isMobile","className","children","API_KEY","BASE_API_URL","POSTER_W500","NOT_FOUND_POSTER_W500","getCurrentPageUrl","location","pathname","substring","lastIndexOf","getSearchIdFromLocationPathname","getAutoComplete","input","a","url","axios","get","response","data","autocomplete","getImagesData","value","getQueryData","allImagesData","map","img","id","regularImgQuality","urls","regular","fullImgQuality","full","name","user","username","description","profile_image","medium","tags","tag","title","results","CalculateWindowHeightHook","useEffect","setDocHeight","document","documentElement","style","setProperty","window","innerHeight","addEventListener","removeEventListener","SingleImage","open","onClose","imagesData","useContext","exitBeforeEnter","div","initial","opacity","animate","exit","transition","duration","filter","item","src","alt","aria-label","onClick","aria-hidden","locationIcon","GalleryCards","searchID","useState","isImageOpen","setIsImageOpen","openImageID","setOpenImageID","columnsCountBreakPoints","475","575","1000","1800","no_image","length","e","preventDefault","console","log","openSingleImage","GotoOtherRoutesHooks","searchbarText","setSearchbarText","oldSearchbarText","setSearchID","pushToHistory","setShowSuggestions","setAllMoviesData","fetchPopularMoviesOnStartPage","search","text","undefined","SearchSuggestions","autoCompltions","showSuggestions","hoveredSuggestionIdx","selectedSuggestion","idx","query","index","StartPageSearch","onSearchbarTextChanging","setOldSearchbarText","showResInSearchBar","node","useRef","hideOnOutsideClick","current","contains","target","ShowHideSuggestionsHook","OnSearchBarClicked","enterKeyPressed","keyCode","which","KeyboardHooks","ref","lupe","onSubmit","onChange","type","placeholder","onKeyPress","GallerySearchbar","Gallery","Movie","href","BG_Unsplash","App","useLocation","history","useHistory","initMovieID","setInitSearchID","setImagesData","setAutoCompltions","setHoveredSuggestionIdx","Provider","replace","push","exact","path","render","Boolean","hostname","match","ReactDOM","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15ef13de.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const AppContext = createContext(null)","import ScrollBar from 'react-perfect-scrollbar'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport './ScroolbarStyle.scss'\r\n\r\nexport default function AppScrollbar (props) {\r\n  // displays perfect scrollbar if not on mobile because I couldn't add refresh gesture on mobile\r\n  // https://github.com/goldenyz/react-perfect-scrollbar/issues/101\r\n  return (\r\n    isMobile ? (\r\n      <div className=\"overflow-y-auto\">\r\n        {props.children}\r\n      </div>\r\n    ) : (\r\n      <ScrollBar className='AppScroolbar'>\r\n        {props.children}\r\n      </ScrollBar>\r\n  ))\r\n}","export const API_KEY = '&client_id=k7OYrmaj7NjZpJJ9QYDXE0jejMLhB-rm7NTO3SLHbJ0'\r\nexport const BASE_API_URL = 'https://api.unsplash.com/'\r\n\r\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/'\r\nexport const POSTER_W500 = `${BASE_IMG_URL}w500`\r\nexport const NOT_FOUND_POSTER_W500 = `${POSTER_W500}null`","export const getCurrentPageUrl = location => (\r\n  location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1)\r\n)\r\n\r\nexport const getSearchIdFromLocationPathname = location => (\r\n  location.pathname.substring(location.pathname.lastIndexOf(\"/\") + 1)\r\n)","import axios from 'axios'\r\nimport { API_KEY, BASE_API_URL } from './Consts'\r\nimport { getSearchIdFromLocationPathname } from './RoutesFunctions'\r\n\r\n\r\n//==== Fetch autoComplitions ====\r\nexport async function getAutoComplete(input){\r\n  const url = `https://unsplash.com/nautocomplete/${input}`\r\n  const response = await axios.get(\r\n    /*'https://cors-anywhere.herokuapp.com/' + */ url\r\n  )\r\n  return response.data.autocomplete\r\n}\r\n\r\n//==== Fetch Images Data ====\r\nexport async function getImagesData(value){\r\n  const url = `${BASE_API_URL}search/photos?query=${value}${API_KEY}`\r\n  const allImagesData = await getQueryData(url)\r\n\r\n  return allImagesData.map(img => ({\r\n    id: img.id,\r\n    regularImgQuality: img.urls.regular,\r\n    fullImgQuality: img.urls.full,\r\n    name: img.user.name,\r\n    username: img.user.username,\r\n    location: img.user.location,\r\n    description: img.description,\r\n    profile_image: img.user.profile_image.medium,\r\n    tags: img.tags.map(tag => tag.title)\r\n  }))\r\n}\r\n\r\nexport async function getQueryData(url){\r\n  const response = await axios.get(url)\r\n  return response.data.results\r\n}\r\n\r\n\r\n//==== Track SearchID ====\r\nexport function setInitSearchID(location){\r\n  const initMovieID = getSearchIdFromLocationPathname(location)\r\n  if(initMovieID === '') return '157336' // interstellar\r\n  return initMovieID\r\n}","import { useEffect } from 'react'\r\n\r\nexport default function CalculateWindowHeightHook() {\r\n// calucluleta size of 1% of window height and saves it to variable\r\n// Proposal for new units to fix this \r\n// https://github.com/w3c/csswg-drafts/issues/4329\r\n// Solution from Jonas Sandstedt comment \r\n// https://chanind.github.io/javascript/2019/09/28/avoid-100vh-on-mobile-web.html\r\n\r\n  useEffect(() => {\r\n    function setDocHeight() {\r\n      document.documentElement.style.setProperty('--vh', `${window.innerHeight/100}px`)\r\n    }\r\n    window.addEventListener('resize', setDocHeight())\r\n    window.addEventListener('orientationchange', setDocHeight())\r\n\r\n    return () => {\r\n      // functions to be called when unmounted. not shure if it does anything here\r\n      document.removeEventListener('resize', setDocHeight)\r\n      document.removeEventListener('orientationchange', setDocHeight)\r\n    }\r\n  }, [])\r\n  \r\n  return (\r\n    <></>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/no_image.2f8a70e1.png\";","export default __webpack_public_path__ + \"static/media/pin.72e55ebe.svg\";","import { useContext } from 'react'\r\nimport '../../styles/main.scss'\r\nimport { AppContext } from '../Contexts/AppContext'\r\nimport { NOT_FOUND_POSTER_W500 } from '../../utilities/Consts'\r\nimport locationIcon from '../../images/pin.svg'\r\nimport { AnimatePresence, motion } from \"framer-motion\"\r\n\r\nexport default function SingleImage({open, onClose, id}) {\r\n  const { imagesData } = useContext(AppContext)\r\n\r\n\r\n\r\n  return (\r\n    <AnimatePresence exitBeforeEnter>\r\n    {open && (\r\n      <motion.div \r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 0.3}}\r\n      >\r\n        <div className='DarkerBG'/>\r\n        <div className='SingleImage'>\r\n          {imagesData.filter(item => item.id === id).map(img => (\r\n          <div>\r\n            <div className='header'>\r\n              <div className='userData'>\r\n                <img \r\n                  src={img.profile_image} \r\n                  alt=\"profile img\"\r\n                  />\r\n                <div>\r\n                  <p>{img.name}</p> \r\n                  <p className='username'>@{img.username}</p> \r\n                </div>\r\n              </div>\r\n\r\n              <div className='btnContainer'>\r\n                <button \r\n                  className=\"btn btn-exit\" \r\n                  aria-label=\"Close\"\r\n                  onClick={onClose}\r\n                >\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n              \r\n            <img\r\n              src={img.regularImgQuality}\r\n              alt={`img ${img.id}`}\r\n            />\r\n            <div className='location'>\r\n              {img.location &&\r\n                <img\r\n                  src={locationIcon}\r\n                  alt='location img'\r\n                />\r\n              }\r\n              <p>{img.location}</p>\r\n              <p className='description'>{img.description}</p>\r\n            </div>\r\n          </div>\r\n          ))}\r\n          </div>\r\n      </motion.div>)}\r\n    </AnimatePresence>\r\n  )\r\n}","import { useState, useContext } from 'react'\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\r\nimport '../../styles/main.scss'\r\nimport { AppContext } from '../Contexts/AppContext'\r\nimport { NOT_FOUND_POSTER_W500 } from '../../utilities/Consts'\r\nimport no_image from '../../images/no_image.png'\r\nimport SingleImage from './SingleImage'\r\n\r\n\r\nexport default function GalleryCards() {\r\n  const { imagesData, searchID} = useContext(AppContext)\r\n  const [isImageOpen, setIsImageOpen] = useState(false)\r\n  const [openImageID, setOpenImageID] = useState()\r\n\r\n  const openSingleImage = (e, id) => {\r\n    e.preventDefault()\r\n    console.log(id)\r\n    setOpenImageID(id)\r\n    setIsImageOpen(true)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='galleryCards'>\r\n\r\n      <p className='title'>\r\n        {searchID}\r\n      </p>\r\n      <ResponsiveMasonry\r\n        columnsCountBreakPoints={{475: 1, 575: 2, 1000: 3, 1800: 4}}\r\n      >\r\n        <Masonry>\r\n        {imagesData.map((item) => \r\n        <div className='cardContainer'>\r\n          <div \r\n            className='Card' \r\n            key={item.id} \r\n          >\r\n            <img // implement error handeling here or delete\r\n              src={item.regularImgQuality !== NOT_FOUND_POSTER_W500 \r\n                ? item.regularImgQuality \r\n                : no_image}\r\n                className={item.tags.length === 0 && 'roundCorners'}\r\n              alt={`poster ${item.id}`}\r\n              onClick={e => openSingleImage(e, item.id)}\r\n            />\r\n            <div>\r\n              {item.tags.map(tag => \r\n                <div>\r\n                  <p>{tag}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        )}\r\n        </Masonry>\r\n      </ResponsiveMasonry>\r\n\r\n      <SingleImage\r\n        open={isImageOpen} \r\n        onClose={() => setIsImageOpen(false)}\r\n        id={openImageID} \r\n      />\r\n\r\n    </div>\r\n  )\r\n}","import { useContext } from 'react'\r\nimport { AppContext } from '../../Contexts/AppContext'\r\n\r\n\r\nexport default function GotoOtherRoutesHooks() {\r\n  const { searchbarText, setSearchbarText, oldSearchbarText,  setSearchID, pushToHistory, setAllMoviesData, fetchPopularMoviesOnStartPage, setShowSuggestions, search} = useContext(AppContext)\r\n\r\n  function selectedSuggestion(text){\r\n    if (searchbarText && text !== undefined) {\r\n      pushToHistory(`/s/${text}`)\r\n      setSearchbarText(oldSearchbarText)\r\n      setShowSuggestions(false)\r\n      search(text)\r\n      setSearchID(text)\r\n    }\r\n  }\r\n\r\n  const gotoStarPage = () => {\r\n    // setAllMoviesData([])\r\n    setSearchbarText('')\r\n    // fetchPopularMoviesOnStartPage()\r\n    pushToHistory(`/`)\r\n  }\r\n\r\n  return [selectedSuggestion, gotoStarPage]\r\n}","import { useContext } from 'react'\r\nimport { AppContext } from '../Contexts/AppContext'\r\nimport '../../styles/main.scss'\r\nimport GotoOtherRoutesHooks from './Hooks/GotoOtherRoutesHooks'\r\n\r\n\r\nexport default function SearchSuggestions() {\r\n  const { searchbarText, autoCompltions, showSuggestions, hoveredSuggestionIdx } = useContext(AppContext)\r\n\r\n  const [selectedSuggestion] = GotoOtherRoutesHooks()\r\n    \r\n  return (\r\n    <ul \r\n      className={'searchbar_ul ' + \r\n      (showSuggestions && searchbarText.length >=3  && 'fadeIn')} \r\n    >\r\n      {autoCompltions.length > 0  //if\r\n      ? autoCompltions.map((item, idx) => \r\n        <li \r\n          className={'searchbar_li ' + \r\n          (hoveredSuggestionIdx === idx && 'active')}\r\n\r\n          onClick={()=> selectedSuggestion(item.query)}\r\n          index={idx}\r\n          key={idx}\r\n        >\r\n          <p>\r\n            {item.query}\r\n          </p>\r\n        </li>\r\n      )\r\n\r\n      : //else \r\n        <li className='noResult'>\r\n          <p>no suggestions</p>\r\n        </li>\r\n      }\r\n    </ul>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/lupe.af78e9aa.svg\";","import { useContext } from 'react'\r\nimport { AppContext } from '../Contexts/AppContext'\r\nimport '../../styles/main.scss'\r\nimport ShowHideSuggestionsHook from './Hooks/ShowHideSuggestionsHook'\r\nimport GotoOtherRoutesHooks from './Hooks/GotoOtherRoutesHooks'\r\nimport KeyboardHooks from './Hooks/KeyboardHooks'\r\nimport SearchSuggestions from './SearchSuggestions'\r\nimport lupe from '../../images/lupe.svg'\r\n\r\nexport default function StartPageSearch () {\r\n  const { searchbarText, oldSearchbarText, onSearchbarTextChanging } = useContext(AppContext)\r\n\r\n  const [node, OnSearchBarClicked] = ShowHideSuggestionsHook()\r\n  const enterKeyPressed = KeyboardHooks()\r\n  const [selectedSuggestion] = GotoOtherRoutesHooks()\r\n\r\n  return (\r\n    <>\r\n      <div className='searchBar' ref={node}>\r\n        <div onClick={() => selectedSuggestion(searchbarText)}>\r\n        <img \r\n          src={lupe} \r\n          alt='lupe'\r\n        />\r\n          </div>\r\n        <form onSubmit={e => e.preventDefault()}>\r\n          <input\r\n            onChange={onSearchbarTextChanging}\r\n            type='text'\r\n            placeholder='Search free high-resolution photos'\r\n            value={searchbarText ? searchbarText : oldSearchbarText}\r\n            onKeyPress={enterKeyPressed}\r\n            onClick={OnSearchBarClicked}\r\n          />\r\n        </form>\r\n      </div>\r\n\r\n      <SearchSuggestions />\r\n    </>\r\n  )\r\n}","import { AppContext } from '../../Contexts/AppContext'\r\nimport { useEffect, useContext, useRef } from 'react'\r\n\r\nexport default function ShowHideSuggestionsHook(props) {\r\n  const { searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText, showResInSearchBar, setShowSuggestions } = useContext(AppContext)\r\n  const node = useRef()\r\n\r\n  function hideOnOutsideClick(e) {\r\n    if (!node.current.contains(e.target)){\r\n      setShowSuggestions(false) \r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', hideOnOutsideClick)\r\n    return () => {\r\n      // return function to be called when unmounted\r\n      document.removeEventListener('mousedown', hideOnOutsideClick)\r\n    }\r\n  }, [])\r\n\r\n  const OnSearchBarClicked = async e => {\r\n    setShowSuggestions(true)\r\n    if (searchbarText === '') {\r\n      showResInSearchBar(oldSearchbarText)\r\n      setSearchbarText(oldSearchbarText)\r\n      setOldSearchbarText('')\r\n    }\r\n  }\r\n\r\n  return [node, OnSearchBarClicked]\r\n}","import { useContext } from 'react'\r\nimport { AppContext } from '../../Contexts/AppContext'\r\nimport GotoOtherRoutesHooks from './GotoOtherRoutesHooks'\r\n\r\nexport default function KeyboardHooks() {\r\n  const { searchbarText } = useContext(AppContext)\r\n  const [selectedSuggestion] = GotoOtherRoutesHooks()\r\n  \r\n  \r\n  function enterKeyPressed(e){\r\n    const code = e.keyCode || e.which\r\n    if (code === 13 /* enter key */) {\r\n      selectedSuggestion(searchbarText)\r\n    }\r\n  }\r\n\r\n  return enterKeyPressed\r\n}","import '../../styles/main.scss'\r\nimport Searchbar from '../Searchbar/Searchbar'\r\n\r\nexport default function GallerySearchbar() {\r\n  return (\r\n    <div className='col-lg-6 col-md-8 col-sm-9 col-12 gallerySearchbar'>\r\n      <div className='row'>\r\n        <Searchbar/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import GalleryCards from './GalleryCards'\r\nimport GallerySearchbar from './GallerySearchbar'\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport default function Gallery() {\r\n  return (\r\n    <motion.div \r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    > \r\n      <GallerySearchbar />\r\n      <GalleryCards />\r\n    </motion.div> \r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/BG_Unsplash.57fddc0a.jpg\";","\r\nimport Searchbar from './Searchbar/Searchbar'\r\nimport BG_Unsplash from '../images/BG_Unsplash.jpg'\r\nimport { motion } from 'framer-motion'\r\n\r\nexport default function Movie () {\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      transition={{ duration: 1 }}\r\n    >\r\n      <div className='startPage'>\r\n        <div className='row container'>\r\n          <h1>Unsplash</h1>\r\n          <p>\r\n            The internet's source of&nbsp;\r\n            <a href='https://unsplash.com/license'>\r\n              freely-usable images\r\n            </a>\r\n            <br />\r\n            Powered by creators everywhere.\r\n          </p>\r\n          \r\n          <Searchbar />\r\n        </div>\r\n      </div>\r\n\r\n      <img \r\n        className='BgImage' \r\n        src={BG_Unsplash} \r\n        alt='background_image' \r\n      />\r\n    </motion.div>\r\n  )\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { Route, Switch, useLocation, useHistory } from 'react-router-dom'\r\nimport { AnimatePresence } from \"framer-motion\"\r\nimport { AppContext } from './AppFiles/Contexts/AppContext'\r\nimport AppScroolbar from './utilities/Scroolbar/AppScrollbar'\r\nimport { getImagesData, setInitSearchID, getAutoComplete } from './utilities/FetchFunctions'\r\nimport { getSearchIdFromLocationPathname, getCurrentPageUrl } from './utilities/RoutesFunctions'\r\nimport CalculateWindowHeightHook from './utilities/CalculateWindowHeightHook'\r\nimport Gallery from './AppFiles/Gallery/Gallery'\r\nimport StartPage from './AppFiles/StartPage'\r\n\r\n\r\nexport default function App () {\r\n  const location = useLocation()  // key to app routes\r\n  const history = useHistory()\r\n  const pushToHistory = url => history.push(url)\r\n\r\n\r\n// ==== Tracks current searchID to auto fetch page when We go to url ====\r\n  const [searchID, setSearchID] = useState(setInitSearchID(location))\r\n  \r\n  useEffect(() => {\r\n    search(searchID)\r\n    console.log(searchID)\r\n  }, [searchID])\r\n\r\n  // implements back button in browser\r\n  useEffect(() => {\r\n    setSearchID(getSearchIdFromLocationPathname(location))\r\n  }, [location.pathname])\r\n  \r\n// ==== END ====\r\n\r\n\r\n// ==== Fetch all Images Data ====\r\n  const [imagesData, setImagesData] = useState([])\r\n\r\n  const search = async (value) => {\r\n    const imagesData = await getImagesData(value)\r\n    setImagesData(imagesData)\r\n  }\r\n// ==== END Fetch all Images Data ====\r\n\r\n\r\n// ==== Searchbar State ====\r\n// przydaloby sie zmienic nazwe na suggestions\r\n  const [searchbarText, setSearchbarText] = useState('')\r\n  const [oldSearchbarText, setOldSearchbarText] = useState('')\r\n  const [autoCompltions, setAutoCompltions] = useState([])\r\n  const [showSuggestions, setShowSuggestions] = useState(false)\r\n  const [hoveredSuggestionIdx, setHoveredSuggestionIdx] = useState()\r\n\r\n  const onSearchbarTextChanging = e => {\r\n    const value = e.target.value.replace(/[^\\w\\s]/gi, '')\r\n    setSearchbarText(value)\r\n    showResInSearchBar(value)\r\n  }\r\n\r\n  const showResInSearchBar = async (value) => {\r\n    if (value.length === 0) setOldSearchbarText('')\r\n    if (value.length >= 3) {\r\n      setAutoCompltions(await getAutoComplete(value))\r\n      setOldSearchbarText(value)\r\n    }\r\n  }\r\n// ==== END Searchbar State ====\r\n\r\n\r\n// ==== Console log stuff ====\r\n  useEffect(() => {\r\n    console.log({imagesData})\r\n  }, [imagesData])\r\n// ==== END Console log stuff ====\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CalculateWindowHeightHook/>\r\n      <AppContext.Provider \r\n        value={{searchID, searchbarText, setSearchbarText, oldSearchbarText, setOldSearchbarText,   onSearchbarTextChanging, imagesData,  setImagesData,  setSearchID, showResInSearchBar, history, pushToHistory, autoCompltions, showSuggestions, setShowSuggestions, hoveredSuggestionIdx, setHoveredSuggestionIdx, search}}\r\n      >\r\n        <AppScroolbar>\r\n          <AnimatePresence exitBeforeEnter>\r\n            <Switch \r\n              location={location} \r\n              key={getCurrentPageUrl(location)}\r\n            >\r\n              <Route exact path='/' render={() => <StartPage/>} />\r\n              <Route exact path={`/s/:${searchID}`} render={() => <Gallery/>} />\r\n            </Switch>\r\n          </AnimatePresence>\r\n        </AppScroolbar>\r\n      </AppContext.Provider>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}